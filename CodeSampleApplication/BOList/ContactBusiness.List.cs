//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeSampleApplication.Bo.List
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using CommonLibrary;
    using System.Reflection;
    
    
    public class Contact : List<CodeSampleApplication.Dto.Contact>
    {
        
        public const string FILL_DB_SETTINGS_EXCEPTION = "Please Fill the DatabaseSmoObjectsAndSettings_Property with a filled DatabaseSmoO" +
            "bjectsAndSettings class and try again";
        
        public const string PRIMARY_KEY_NOT_FOUND_EXCEPTION_VAR_NAME = "PRIMARY_KEY_NOT_FOUND_EXCEPTION_VAR_NAME";
        
        private CommonLibrary.DatabaseSmoObjectsAndSettings _databaseSmoObjectsAndSettings;
        
        private CommonLibrary.Base.Business.BaseBusiness<CodeSampleApplication.Bo.Contact, CodeSampleApplication.Dto.Contact> _baseBusiness;
        
        private CommonLibrary.Base.Database.BaseDataAccess<CodeSampleApplication.Dto.Contact> _baseDataAccess;
        
        public Contact()
        {
        }
        
        public Contact(CommonLibrary.DatabaseSmoObjectsAndSettings databaseSmoObjectsAndSettings)
        {
            _databaseSmoObjectsAndSettings = databaseSmoObjectsAndSettings;
            _baseDataAccess = 
                new CommonLibrary.Base.Database.BaseDataAccess<CodeSampleApplication.Dto.Contact>(_databaseSmoObjectsAndSettings);
            _baseBusiness = 
                new CommonLibrary.Base.Business.BaseBusiness<CodeSampleApplication.Bo.Contact, CodeSampleApplication.Dto.Contact>();
        }
        
        public virtual CommonLibrary.DatabaseSmoObjectsAndSettings DatabaseSmoObjectsAndSettings
        {
            get
            {
                return this._databaseSmoObjectsAndSettings;
            }
            set
            {
                this._databaseSmoObjectsAndSettings = value;
            }
        }
        
        private bool BaseDataAccessAvailable()
        {
            bool baseDataAccessAvailable = false;
            if ((_baseDataAccess == null))
            {
                if ((_databaseSmoObjectsAndSettings != null))
                {
                    _baseDataAccess = 
                new CommonLibrary.Base.Database.BaseDataAccess<CodeSampleApplication.Dto.Contact>(_databaseSmoObjectsAndSettings);
                }
                baseDataAccessAvailable = true;
            }
            else
            {
                baseDataAccessAvailable = true;
            }
            return baseDataAccessAvailable;
        }
        
        private void FillByGetPermutation(CommonLibrary.Enumerations.GetPermutations getPermutation, CodeSampleApplication.Bo.Contact filledBo)
        {
            if (this.BaseDataAccessAvailable())
            {
                this.Clear();
                CodeSampleApplication.Dto.Contact dto = ((CodeSampleApplication.Dto.Contact)(filledBo));
                List<CodeSampleApplication.Dto.Contact> returnDto = _baseDataAccess.Get(dto, getPermutation);
                int control = returnDto.Count;
                if ((control > 0))
                {
                    int counter;
                    for (counter = 0; (counter < control); counter = (counter + 1))
                    {
                        CodeSampleApplication.Bo.Contact boToFill = new CodeSampleApplication.Bo.Contact();
                        _baseBusiness.FillThisWithDto(returnDto[counter], boToFill);
                        this.Add(boToFill);
                    }
                }
            }
            else
            {
                throw new System.ApplicationException(FILL_DB_SETTINGS_EXCEPTION);
            }
        }
        
        public virtual void FillByPrimaryKey(CodeSampleApplication.Bo.Contact filledBo)
        {
            CommonLibrary.Enumerations.GetPermutations getPermutation = CommonLibrary.Enumerations.GetPermutations.ByPrimaryKey;
            this.FillByGetPermutation(getPermutation, filledBo);
        }
        
        public virtual void FillByCriteriaFuzzy(CodeSampleApplication.Bo.Contact filledBo)
        {
            CommonLibrary.Enumerations.GetPermutations getPermutation = CommonLibrary.Enumerations.GetPermutations.ByFuzzyCriteria;
            this.FillByGetPermutation(getPermutation, filledBo);
        }
        
        public virtual void FillByCriteriaExact(CodeSampleApplication.Bo.Contact filledBo)
        {
            CommonLibrary.Enumerations.GetPermutations getPermutation = CommonLibrary.Enumerations.GetPermutations.ByExplicitCriteria;
            this.FillByGetPermutation(getPermutation, filledBo);
        }
        
        public virtual void FillByGetAll(CodeSampleApplication.Bo.Contact filledBo)
        {
            CommonLibrary.Enumerations.GetPermutations getPermutation = CommonLibrary.Enumerations.GetPermutations.AllByColumnMappings;
            this.FillByGetPermutation(getPermutation, filledBo);
        }
    }
}
